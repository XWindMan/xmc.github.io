<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WindMan Blog</title>
    <description>风一样de男子</description>
    <link>//</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 27 Jul 2020 11:42:17 +0800</pubDate>
    <lastBuildDate>Mon, 27 Jul 2020 11:42:17 +0800</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Android 面试 Java部分</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;java 相关&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;容器（HashMap、HashSet、LinkedList、ArrayList、数组等）
内存模型
垃圾回收算法（JVM）
垃圾回收机制和调用 System.gc()的区别？
类加载过程（需要多看看，重在理解，对于热修复和插件化比较重要）
反射
多线程和线程池
设计模式（六大基本原则、项目中常用的设计模式、手写单例等）
Java 四大引用
Java 的泛型
final、finally、finalize 的区别
接口、抽象类的区别&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jul 2020 00:00:00 +0800</pubDate>
        <link>/2020/07/27/Android-%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80.html</link>
        <guid isPermaLink="true">/2020/07/27/Android-%E9%9D%A2%E8%AF%95-Java%E5%9F%BA%E7%A1%80.html</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>http 及其抓包</title>
        <description>
</description>
        <pubDate>Sat, 18 Jul 2020 00:00:00 +0800</pubDate>
        <link>/2020/07/18/Android-http.html</link>
        <guid isPermaLink="true">/2020/07/18/Android-http.html</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>svg 在Android中的使用</title>
        <description>
</description>
        <pubDate>Fri, 17 Jul 2020 00:00:00 +0800</pubDate>
        <link>/2020/07/17/svg.html</link>
        <guid isPermaLink="true">/2020/07/17/svg.html</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>node jwt 苹果登录验证</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;苹果登录有两种方式验证：jwt形式；code授权码形式.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jwt&quot;&gt;jwt&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;格式：heard.paylod.signture&lt;/li&gt;
  &lt;li&gt;signtura生成方式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HMACSHA256(base64UrlEncode(header) + &quot;.&quot; +base64UrlEncode(payload),secret)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;解析之后
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ header: {
   kid: '86D32Kf',
   alg: 'RS256' 
 },
payload: 
 { iss: 'https://appleid.apple.com',
   aud: 'com.company.product',
   exp: 1594712245,
   iat: 1594711645,
   sub: '001610.d0b9dfa70cc24cd79f5bba662c625102.0718',
   c_hash: 'tlydpf-lV51Gi2pKAGZKCA',
   email: '5u2nbamwvm@privaterelay.appleid.com',
   email_verified: 'true',
   is_private_email: 'true',
   auth_time: 1594711645,
   nonce_supported: true },
signature:'es-mMU2FRsILnqmo_G5VbNKMz9gHtL9GjtyuiiiiiiiiP5J9ZhttU1_EJBEDBkBnR1jcrq_xM7kCpq357aN_EAC6G7bgGq4_RrAlG8XwEj4RSo1GoYQX1F0sby0SQrf1D_NZzdirjuUX7yNf-ZoeglyBg-7e-CbTjqfYBOswh_jsTWZ-I3vM-Ctcg12E5tUk345678jzaKpzIuL4KvlALM-VrY-Wp_7mFj4a3KKAxls0ojAjD434EL6oPDT8452j8QOWRFtPRttrqLqfpQbJJeXMCJkW5qIKeI9CU7v6Bpo5RLz3P8yGLrUoY3UJXyKT5_5MEs2bbw' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nodejs实现&quot;&gt;nodejs实现&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var jwt = require('jsonwebtoken');
const jwksClient = require('jwks-rsa');
// 获取苹果公钥json
var jwt_client = jwksClient({
    jwksUri: 'https://appleid.apple.com/auth/keys'
});
exports.verifyAppleSignin = function(req, res) {
    let jwtToken = req.param('jwtToken');
    // 解析出完整的jwt数据
    let jwtStr = jwt.decode(jwtToken, { complete: true })
    jwt_client.getSigningKey(jwtStr.header.kid, function(err, key) {
        // 通过header里的kid和公钥json里的kid匹配，生成公钥
        // 当然也可以自己通过n和e生成公钥
        let signingKey = key.rsaPublicKey;
        // 验证，是否一致
        jwt.verify(jwtToken, signingKey, (err, data) =&amp;gt; {
            if (!err) {
                console.log('verifyAppleSignin,verify ok')
            } else {
                console.log('err', err);
            }
        })
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 01 Jul 2020 00:00:00 +0800</pubDate>
        <link>/2020/07/01/node%E8%8B%B9%E6%9E%9C%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81.html</link>
        <guid isPermaLink="true">/2020/07/01/node%E8%8B%B9%E6%9E%9C%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81.html</guid>
        
        <category>nodejs</category>
        
        
        <category>nodejs</category>
        
      </item>
    
      <item>
        <title>deno</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;自己创建的自己亲手毁掉，哈哈哈哈，有意思&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;安装
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install deno
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;deno -h&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deno 0.32.0
A secure JavaScript and TypeScript runtime // 安全的JavaScript和TypeScript运行时
Docs: https://deno.land/std/manual.md
Modules: https://deno.land/x/
Bugs: https://github.com/denoland/deno/issues
To run the REPL supply no arguments:

  deno
To evaluate code from the command line:

  deno eval &quot;console.log(30933 + 404)&quot;
To execute a script:

  deno https://deno.land/std/examples/welcome.ts
The default subcommand is 'run'. The above is equivalent to

  deno run https://deno.land/std/examples/welcome.ts
See 'deno help run' for run specific flags.
USAGE:
    deno [SUBCOMMAND]
OPTIONS:
    -h, --help                     Prints help information
    -L, --log-level &amp;lt;log-level&amp;gt;    Set log level [possible values: debug, info]
    -V, --version                  Prints version information
SUBCOMMANDS:
    bundle         Bundle module and dependencies into single file
    completions    Generate shell completions
    eval           Eval script
    fetch          Fetch the dependencies
    fmt            Format files
    help           Prints this message or the help of the given subcommand(s)
    info           Show info about cache or info related to source file
    install        Install script as executable
    repl           Read Eval Print Loop
    run            Run a program given a filename or url to the source code
    test           Run tests
    types          Print runtime TypeScript declarations
ENVIRONMENT VARIABLES:
    DENO_DIR       Set deno's base directory
    NO_COLOR       Set to disable color
    HTTP_PROXY     Proxy address for HTTP requests (module downloads, fetch)// 请求的HTTP_PROXY代理地址（模块下载，获取）
    HTTPS_PROXY    Same but for HTTPS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 01 Jul 2020 00:00:00 +0800</pubDate>
        <link>/2020/07/01/deno.html</link>
        <guid isPermaLink="true">/2020/07/01/deno.html</guid>
        
        <category>deno</category>
        
        
        <category>deno</category>
        
      </item>
    
      <item>
        <title>日常记录</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;记忆是一场没有尽头的纪录片&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Foxmail
    &lt;blockquote&gt;
      &lt;p&gt;今天突然想更换一下GitHub的邮箱，因为现在这些老外不太靠谱了，又加上翻墙困难，哪天Gmail无法登陆了就凉凉了，竟然发现Foxmail没有入口，一顿搜索，发现foxmail 在2005年被腾讯收购，需要在qq邮箱注册Foxmail。然后设置独立密码，于是我的GitHub就可以用双号登陆啦。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 30 Jun 2020 00:00:00 +0800</pubDate>
        <link>/2020/06/30/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95.html</link>
        <guid isPermaLink="true">/2020/06/30/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95.html</guid>
        
        <category>read</category>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>Git 笔记</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;2005年，神一样的linus，两周就用C写完了Git，一个月之内，Linux系统的源码已经由Git管理了，2008年，GitHub上线，为开源项目免费提供Git存储。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Git分布式管理
    &lt;blockquote&gt;
      &lt;p&gt;CVS和SVN是集中式管理，必须联网，与中央服务器沟通。Git在本地即可管理版本，在中央服务器与别人的版本合并&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Git安装
    &lt;blockquote&gt;
      &lt;p&gt;Git最早只能在Linux和Unix系统上，目前各大系统都可以了。
linux安装：sudo apt-get install git
mac安装: brew install git (mac安装homebrew：/usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”)
windows安装：下载gitbash for Windows&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;git创建仓库
    &lt;blockquote&gt;
      &lt;p&gt;通常情况下，mkdir 一个路径，然后 git  init 
此时，会生出.git文件，以后版本管理就有这个文件了&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;关联GitHub
    &lt;blockquote&gt;
      &lt;p&gt;在 GitHub上创建一个空仓库
在本地仓库目录： git remote add origin（远程哭名字） git@github.com:GitHub账户名/xxx.git
git push -u origin master&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;clone
    &lt;blockquote&gt;
      &lt;p&gt;git clone，Git支持多种协议，包括https，但ssh协议速度最快。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;花式操作分支
```&lt;/li&gt;
  &lt;li&gt;查看远程分支：git branch -a&lt;/li&gt;
  &lt;li&gt;查看本地分支：git branch&lt;/li&gt;
  &lt;li&gt;创建分支：git branch  xxx&lt;/li&gt;
  &lt;li&gt;切换分支：git checkout/switch   xxx&lt;/li&gt;
  &lt;li&gt;创建并切换：git checkout -b dev// git switch  -b dev&lt;/li&gt;
  &lt;li&gt;合并分支：git merge dev&lt;/li&gt;
  &lt;li&gt;删除分支：git branch -d dev
```&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;–pretty=oneline
git add xx 添加修改到暂存区stage// git add . // git log // git status // git diff // git diff xxx         // git commit -m ‘xx’ 把修改从暂存区的所有提交到当前分支 // git push // git rest –hard HEAD^(HEAD^^,HEAD~100)//  git reset –hard 1094a回退版本(id只写前几位即可)// git reflog记录之前的命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;git config –global i18n.logOutputEncoding gbk //
git config –global i18n.commitEncoding gbk
git checkout –file // 撤销未提交的修改
git checkout xx 切换分支
git reset HEAD xx 把xx文件从暂存区恢复到工作区
git rm删掉，并且git commit&lt;/p&gt;

&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 30 Jun 2020 00:00:00 +0800</pubDate>
        <link>/2020/06/30/git.html</link>
        <guid isPermaLink="true">/2020/06/30/git.html</guid>
        
        <category>Tool</category>
        
        
        <category>Tool</category>
        
      </item>
    
      <item>
        <title>npm</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;npm is the world’s largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/misc/semver#advanced-range-syntax&quot;&gt;更新时，版本号range逻辑&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;x:重构等;y:功能升级;z:bug修复。[x.y.z]
~:指定了xy，只能升级z；只指定了x，则可以升级yz到最大；如果带beta，则只能升级beta-x
^:最左边第一个不为0的不升级，0以后的升级&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
        <link>/2020/06/29/npm.html</link>
        <guid isPermaLink="true">/2020/06/29/npm.html</guid>
        
        <category>nodejs</category>
        
        
        <category>nodejs</category>
        
      </item>
    
      <item>
        <title>android sd卡</title>
        <description>
</description>
        <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
        <link>/2020/06/29/Android-SD%E5%8D%A1.html</link>
        <guid isPermaLink="true">/2020/06/29/Android-SD%E5%8D%A1.html</guid>
        
        <category>Android</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>MarkDown</title>
        <description>&lt;h2 id=&quot;编辑工具&quot;&gt;编辑工具&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;离线：Typora&lt;/li&gt;
  &lt;li&gt;在线：简书、有道等&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;标题及段落&quot;&gt;标题及段落&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h1 id=&quot;一级标题&quot;&gt;一级标题===&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;二级标题&quot;&gt;二级标题—&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;用#号表示1-6
    &lt;h1 id=&quot;1--2--3-4-5-6&quot;&gt;1 ;## 2 ;### 3;#### 4;##### 5；###### 6&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;两个空格换行
行1&lt;br /&gt;
行2&lt;/li&gt;
  &lt;li&gt;空行换行
行1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;行2&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;分割线：三个以上的星号、减号、底线
*** ；— ；___&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;内容体&quot;&gt;内容体&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;斜体：* ；粗体：** ；又粗又斜：&lt;strong&gt;* 
&lt;em&gt;斜&lt;/em&gt; ；&lt;/strong&gt;粗** ；&lt;strong&gt;&lt;em&gt;又粗又斜&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;删除线：&lt;del&gt;xxx&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;下划线：nnd，居然用html标签 &lt;u&gt;&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 22 Jun 2020 00:00:00 +0800</pubDate>
        <link>/2020/06/22/markdown.html</link>
        <guid isPermaLink="true">/2020/06/22/markdown.html</guid>
        
        <category>Tools</category>
        
        
      </item>
    
  </channel>
</rss>
