I"D<blockquote>
  <p>let和with合并为run，孪生出apply，also又孪生与let</p>
</blockquote>

<ul>
  <li>let，it代理对象，且返回最后一行代码或者指定return</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a.let{
    it// 此时it就代理了a
}
</code></pre></div></div>

<ul>
  <li>with，返回最后一行代码或者指定return</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>with(a){
    // 此时此作用于有个this，可省略，直接调用a的对象
}
</code></pre></div></div>

<ul>
  <li>run let和with的补充，省略了let内的it，解决了with调用之前的判空</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a?.run{
    // 此时可以直接调用a的参数
}
</code></pre></div></div>

<ul>
  <li>apply，与run是孪生兄弟，唯一不同的是返回对象本身；还可以用来判空链式写法</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a?.apply{
    // 此时可以省略啊直接调用a对象的成员
    // 返回a
}

// 如果a中有b，b有b1

a?.apply{
    b?.apply{

    }?.b1.apply{

    }
}

</code></pre></div></div>

<ul>
  <li>also let的孪生兄弟，返回对象本省</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a.also{
    it.// it 代理a
    // 最终返回a
}
</code></pre></div></div>
:ET