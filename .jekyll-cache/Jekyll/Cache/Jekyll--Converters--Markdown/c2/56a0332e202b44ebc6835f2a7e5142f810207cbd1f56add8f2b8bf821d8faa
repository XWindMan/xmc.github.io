I"3<blockquote>
  <p>一片，两片，三四片；五片，六片，七八片。落入芦苇全不见！</p>
</blockquote>

<h2 id="h5唤起app">h5唤起app</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ [scheme:][//authority][path][?query][#fragment],如：https://www.baidu.com
+ scheme的触发方式会被浏览器拦截，它们都各自维护着一个白名单，但是微博之类的都是可以申请的，只是条件各不相同，比如微博的就是在你的 APP 中添加打开微博的入口，三个月内唤起超过 100w 次，就可以加入白名单了。
+ 在安卓中我们一般都是直接打开腾讯应用宝，ios 中 直接打开 App Store。点击腾讯应用宝中的“打开”按钮，可以直接唤起我们的 APP，但是无法打开 APP 中的某个功能（就是无法打开指定页面）。腾讯应用宝对外开放了一个叫做 APP Link 的申请，只要你申请了 APP Link，就可以通过在打开应用宝的时候在应用宝地址后面添加上 &amp;android_schema={your_scheme} ，来打开指定的页面了。
+ location.href跳转：window.location.href = 'sinaweibo://qrcode';
+ a标签唤起： &lt;a href="mqqapi://card/show_pslcard?src_type=internal&amp;version=1&amp;uin=123456"&gt;QQ临时交流&lt;/a&gt;
+ iframe方案： &lt;iframe src="sinaweibo://qrcode"&gt;

参考：https://www.jianshu.com/p/500f4be528e3
</code></pre></div></div>

<h2 id="android-9-允许http">Android 9+ 允许http</h2>
<ul>
  <li>res目录下创建xml目录,创建network_security_config.xml文件
```
<?xml version="1.0" encoding="utf-8"?></li>
</ul>
<network-security-config>
<base-config cleartextTrafficPermitted="true" />
</network-security-config>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ AndroidManifest.xml添加:
</code></pre></div></div>
<p>android:networkSecurityConfig=”@xml/network_security_config”</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
## Android8.0 允许安装未知来源权限
+ 8.0之前，从除官方应用商店之外的来源安装App时，需要打开系统设置当中的”允许未知来源”，在最新的Android O当中谷歌已经删除了该永久授权的选项，从系统设置当中已经找不到该开关。谷歌将永久授权修改为每次的单独授权，当用户每次安装第三方来源（包括华为应用市场等）的android软件时需要对软件权限进行手动确认
+ 添加权限
</code></pre></div></div>
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES" />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ 判断运行时权限是否打开
</code></pre></div></div>
<p>if(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O){
 //先判断是否有安装未知来源应用的权限
    if(!getPackageManager().canRequestPackageInstalls()){
    //跳转到应用详情，打开开关
    }
 }</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ 跳转到应用详情，打开开关
</code></pre></div></div>
<p>Uri packageURI = Uri.parse(“package:”+mContext.getPackageName());
Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES,packageURI);
startActivityForResult(intent, INSTALL_PERMISS_CODE);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ onActivityResult回调
</code></pre></div></div>
<p>if (resultCode == RESULT_OK &amp;&amp; requestCode == INSTALL_PERMISS_CODE) {
   // 安装APP
 }</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
## AlertDialog 回调 
+ 创建 AlertDialog
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static void showAlert(Context context, String title, String message, OnClickListener listener){
    Builder builder = new Builder(context);
    builder.setTitle(title);
    builder.setMessage(message);
    builder.setPositiveButton("确定", listener);
    builder.setCancelable(false);
    builder.setIcon(R.mipmap.ic_launcher);
    AlertDialog dialog = builder.create();
    dialog.show();
} ``` + 接管点击事件 ``` showAlert(this, "title", "message", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    
                }
            }); ``` ## TextView 小特性 + 可复制，如果是在listview里，替换为RecyclerView 即可 ``` android:textIsSelectable="true" ``` + 可滑动 ```  tv.movementMethod = ScrollingMovementMethod.getInstance() ``` + 支持富文本:SpannableString或者html ``` //设置Hello World前三个字符为红色,背景为蓝色 SpannableString textSpanned = new SpannableString("Hello World"); // ForegroundColorSpan(Color.RED) 设置前景 // BackgroundColorSpan(Color.RED) 设置背景 // new StyleSpan(Typeface.ITALIC) 斜体 // new UnderlineSpan() 下划线 // ClickableSpan 点击事件 textSpanned.setSpan(xxxSpan,0, 3, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); tv.setMovementMethod(LinkMovementMethod.getInstance()); tv.setText(textSpanned4); ``` + 跑马灯：借助系统或者自定义或者直接用别人的轮子 ```
&lt;TextView
    android:layout_marginTop="30dp"
    android:layout_width="100dp"
    android:layout_height="30dp"
    android:text="Hello World! wertyuiodfghjklxcvbnm,.dfghjklghjkl"
    android:singleLine="true"
    android:scrollHorizontally="true"
    android:ellipsize="marquee"
    android:focusable="true"
    android:focusableInTouchMode="true"
    android:marqueeRepeatLimit="marquee_forever"
    /&gt; ```
</code></pre></div></div>

<h2 id="android-多国语言">android 多国语言</h2>
<ul>
  <li></li>
</ul>

<h2 id="报错is-not-accessible-from-javalangclass-androidappactivitythread">【报错】is not accessible from java.lang.Class android.app.ActivityThread</h2>
<ul>
  <li>修饰改为public</li>
</ul>
:ET