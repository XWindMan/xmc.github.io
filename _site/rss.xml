<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WindMan Blog</title>
    <description>风一样de男子</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 07 Mar 2023 12:31:00 +0800</pubDate>
    <lastBuildDate>Tue, 07 Mar 2023 12:31:00 +0800</lastBuildDate>
    <generator>Jekyll v4.3.1</generator>
    
      <item>
        <title>Android关键词</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;key word&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;

&lt;h2 id=&quot;activity&quot;&gt;Activity&lt;/h2&gt;

&lt;h2 id=&quot;wms&quot;&gt;WMS&lt;/h2&gt;

&lt;h2 id=&quot;沉浸式状态栏&quot;&gt;沉浸式状态栏&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;状态栏透明，然后根据内容适配颜色&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;简单的就是fitsSystemWindows，让系统自适配。&lt;/li&gt;
  &lt;li&gt;复杂的就是现接管window的标识（清除、add），设置activity全屏且状态栏不消失，自己适配padding和margin，根据距离适当移动内容区并控制状态栏字体颜色
 https://juejin.cn/post/7203563038301061181?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;splite-sqlitedatabase&quot;&gt;splite （SQLiteDatabase）&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;轻量数据库，借用辅助类SQLiteOpenHelper实现增删改查&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;SQLiteOpenHelper，自己写一个继承之， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate&lt;/code&gt; 仅首次创建数据执行，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onUpgrade&lt;/code&gt; 仅新版本大于老版本执行。创建表时，可以指定主键&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; : 借助ContentValues&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt;：”xxx=?”,填充？即可&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query&lt;/code&gt; :借助Cursor&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Mar 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/03/06/Android%E5%85%B3%E9%94%AE%E8%AF%8D.html</link>
        <guid isPermaLink="true">http://localhost:4000/2023/03/06/Android%E5%85%B3%E9%94%AE%E8%AF%8D.html</guid>
        
        <category>Android</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>list循环删除</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;倒着删、迭代器删、stream删&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;for 循环倒序删除
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  List&amp;lt;String&amp;gt; list = new ArrayList(initList);
  for (int i = list.size() - 1; i &amp;gt; 0; i--) {
      String str = list.get(i);
      if (ok) {
          list.remove(i);
      }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;迭代器循环迭代器删除
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  List&amp;lt;String&amp;gt; list = new ArrayList(initList);
  for (Iterator&amp;lt;String&amp;gt; iterator = list.iterator(); iterator.hasNext(); ) {
      String str = iterator.next();
      if (ok) {
          iterator.remove();
      }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;stream filter 过滤
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  List&amp;lt;String&amp;gt; list = new ArrayList(initList);
  if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.N) {
      list.stream().filter(new Predicate&amp;lt;String&amp;gt;() {
          @Override
          public boolean test(String s) {
              return true;
          }
      }).collect(Collectors.toList());
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 07 Feb 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/02/07/list%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4.html</link>
        <guid isPermaLink="true">http://localhost:4000/2023/02/07/list%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4.html</guid>
        
        <category>Java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>乐观锁和悲观锁</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;乐观锁、悲观锁&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;乐观锁&quot;&gt;乐观锁&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;使用场景：多读少写。增加吞吐量。&lt;/li&gt;
  &lt;li&gt;一般对比version实现
    &lt;blockquote&gt;
      &lt;p&gt;常用例子：银行柜台，某人账号100，操作员A取走30，操作员B取走20。A提交版本加一，B提交时被驳回，B读后再加一才能更新。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;悲观锁&quot;&gt;悲观锁&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;常见。&lt;/li&gt;
  &lt;li&gt;Synchronized 关键字，同时只有一个线程可访问。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Feb 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/02/06/%E9%94%81.html</link>
        <guid isPermaLink="true">http://localhost:4000/2023/02/06/%E9%94%81.html</guid>
        
        <category>Java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>ViewPage2</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;基于RecyclerView，替代ViewPage&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;基本使用&quot;&gt;基本使用&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;绑定adapter和监听
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;viewpage.adapter = ViewPagerAdapter()
viewpage.currentItem = 1
viewpage.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
          override fun onPageSelected(position: Int) {
              super.onPageSelected(position)
              Log.e(TAG, &quot;onPageSelected: $position&quot;)
              lastPosiont = position
          }
      })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;adapter
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ViewPagerAdapter(private val mLevel: Array&amp;lt;ByteArray&amp;gt;) : RecyclerView.Adapter&amp;lt;ViewPagerAdapter.ViewHolder&amp;gt;() {
  override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
      return ViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.mode_item, parent, false))
  }

  override fun onBindViewHolder(holder: ViewHolder, position: Int) {
      holder.itemImg.setLevel(mLevel[position])
  }

  override fun getItemCount(): Int {
      return mLevel.size
  }

  inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
      var itemImg: ImageView

      init {
          itemImg = itemView.findViewById(R.id.item_img)
          itemView.tag = this
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;知识点&quot;&gt;知识点&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;初始化后会先走一次监听，位置为设定的，如果没有设定，就是0&lt;/li&gt;
  &lt;li&gt;ViewPage2基于RecyclerView，第一个就是它
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var recyclerView: RecyclerView = viewpage.getChildAt(0) as RecyclerView
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;获取ItemView，借道RecyclerView
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var curItemView = recyclerView.layoutManager?.findViewByPosition(position)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 01 Feb 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/02/01/Android-ViewPage2.html</link>
        <guid isPermaLink="true">http://localhost:4000/2023/02/01/Android-ViewPage2.html</guid>
        
        <category>Android</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>RecyclewView</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Android 使用最频繁的一个group组件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;基本使用&quot;&gt;基本使用&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;初始化及监听&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mAdapter = new XXXAdapter(mContext);
LinearLayoutManager layoutManager = new LinearLayoutManager(mContext, LinearLayoutManager.HORIZONTAL, false);
mRecyclerView.setLayoutManager(layoutManager);
mRecyclerView.setItemAnimator(new DefaultItemAnimator());
mRecyclerView.setAdapter(mAdapter);

mAdapter.setOnItemClickListener(type -&amp;gt; {
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class XXXAdapter extends RecyclerView.Adapter&amp;lt;XXXAdapter.ItemViewHolder&amp;gt; {

    private LayoutInflater mInflater;

    private OnItemClickListener mOnItemClickListener;

    private MsgEntity mMsgEntity;

    public MsgCenterAdapter(Context context) {
        mInflater = LayoutInflater.from(context);
    }

    public void setMsgEntity(MsgEntity msgEntity) {
        mMsgEntity = msgEntity;
    }

    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {
        mOnItemClickListener = onItemClickListener;
    }

    @Override
    public ItemViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        return new ItemViewHolder(mInflater.inflate(R.layout.item_msg_center, parent, false));
    }

    @Override
    public void onBindViewHolder(ItemViewHolder holder, int position) {
        Context context = holder.itemView.getContext();
        holder.mIcon.setImageResource(R.mipmap.icon_msg_center_comment);
        holder.mName.setText(R.string.msgCenterComment);
    }

    @Override
    public int getItemCount() {
        return 4;
    }

    static class ItemViewHolder extends RecyclerView.ViewHolder {
        @BindView(R.id.icon)
        ImageView mIcon;

        public ItemViewHolder(View itemView) {
            super(itemView);
            ButterKnife.bind(this, itemView);
            setIsRecyclable(false);
        }
    }

    public interface OnItemClickListener {
        void onItemClick(@MsgType String type);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;进阶&quot;&gt;进阶&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;LayoutManager
    &lt;ul&gt;
      &lt;li&gt;LinearLayoutManager 横向、纵向。&lt;/li&gt;
      &lt;li&gt;GridLayoutManager 网格&lt;/li&gt;
      &lt;li&gt;StaggeredGridLayoutManager 瀑布&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分割线 ItemDecoration：onDraw、onDrawOver、getItemOffsets
    &lt;ul&gt;
      &lt;li&gt;onDraw方法先于drawChildren&lt;/li&gt;
      &lt;li&gt;onDrawOver在drawChildren之后，一般我们选择复写其中一个即可。&lt;/li&gt;
      &lt;li&gt;getItemOffsets 可以通过outRect.set()为每个Item设置一定的偏移量，主要用于绘制Decorator。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class DividerGridItemDecoration extends RecyclerView.ItemDecoration{

    private static final int[] ATTRS = new int[] { android.R.attr.listDivider };
    private Drawable mDivider;

    public DividerGridItemDecoration(Context context){
        final TypedArray a = context.obtainStyledAttributes(ATTRS);
        mDivider = a.getDrawable(0);
        a.recycle();
    }

    @Override
    public void onDraw(Canvas c, RecyclerView parent, State state){
        drawHorizontal(c, parent);
        drawVertical(c, parent);
    }

    public void drawHorizontal(Canvas c, RecyclerView parent){
        int childCount = parent.getChildCount();
        for (int i = 0; i &amp;lt; childCount; i++){
            final View child = parent.getChildAt(i);
            final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();
            final int left = child.getLeft() - params.leftMargin;
            final int right = child.getRight() + params.rightMargin
                    + mDivider.getIntrinsicWidth();
            final int top = child.getBottom() + params.bottomMargin;
            final int bottom = top + mDivider.getIntrinsicHeight();
            mDivider.setBounds(left, top, right, bottom);
            mDivider.draw(c);
        }
    }

    public void drawVertical(Canvas c, RecyclerView parent){
        final int childCount = parent.getChildCount();
        for (int i = 0; i &amp;lt; childCount; i++){
            final View child = parent.getChildAt(i);
            final RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();
            final int top = child.getTop() - params.topMargin;
            final int bottom = child.getBottom() + params.bottomMargin;
            final int left = child.getRight() + params.rightMargin;
            final int right = left + mDivider.getIntrinsicWidth();
            mDivider.setBounds(left, top, right, bottom);
            mDivider.draw(c);
        }
    }

    @Override
    public void getItemOffsets(Rect outRect, int itemPosition,
            RecyclerView parent){
        int spanCount = getSpanCount(parent);
        int childCount = parent.getAdapter().getItemCount();
        outRect.set(0, 0, mDivider.getIntrinsicWidth(), 0);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;动画&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;绘制：测量 onMeasure 和布局 onLayout 工作委托给 LayoutManager 来执行，不同的 LayoutManager 会有不同风格的布局显示，这是一种策略模式
&lt;img src=&quot;/assets/img/recyclerview_draw.png&quot; alt=&quot;复杂度&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recycler&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;四级缓存&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;header 和 footer&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 01 Feb 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/02/01/Android-RecyclewView.html</link>
        <guid isPermaLink="true">http://localhost:4000/2023/02/01/Android-RecyclewView.html</guid>
        
        <category>Android</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android知识点</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;基于RecyclerView，替代ViewPage&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Intent 传值的上限。
取决于binder事务缓存的分配，每个进程分配1M。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 21 Jan 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/01/21/%E6%8A%80%E6%9C%AF%E7%82%B9.html</link>
        <guid isPermaLink="true">http://localhost:4000/2023/01/21/%E6%8A%80%E6%9C%AF%E7%82%B9.html</guid>
        
        <category>Android</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>心声</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;哲学如果需要举例来证明，那它就很快会夸，只可意会。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;随着年纪的增大，过年已经不在乎是否精彩，而是觉得，陪伴、相聚变得很珍贵。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 12 Jan 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/01/12/%E5%BF%83%E5%A3%B0.html</link>
        <guid isPermaLink="true">http://localhost:4000/2023/01/12/%E5%BF%83%E5%A3%B0.html</guid>
        
        <category>read</category>
        
        
        <category>read</category>
        
      </item>
    
      <item>
        <title>JS</title>
        <description>&lt;ul&gt;
  &lt;li&gt;创建对象&lt;/li&gt;
  &lt;li&gt;临时用
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var obj={}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;工厂
 ```
 function createAlarm(date,repeat){
 	return {
 		date:date,
 		repeat:repeat
 	}
 }&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
 - 可以new的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;function Alarm(date,repeat){
 	this.date=date
 	this.repeat=repeat
 	this.test=function(){
 		console.log(date.getTime())
 	}
 }&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
+ 时间对象Date 
 - new Date() 可以指定时间
 - 可以获取年月日时分秒
 - 通过getTime()比较先后

+ 枚举。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;var CMDType = {
    MOTOR: 1,
    ALARM: 2, 
    RING: 3 
}
```&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Nov 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/11/29/JS.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/11/29/JS.html</guid>
        
        <category>JS</category>
        
        
      </item>
    
      <item>
        <title>基金</title>
        <description>&lt;ul&gt;
  &lt;li&gt;下载、安装、移除Quarantine
https://www.jianshu.com/p/ddeb6c4f5c01&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 22 Nov 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/11/22/ps.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/11/22/ps.html</guid>
        
        <category>ps</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>BLE</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;通用服务
&lt;img src=&quot;/assets/img/ble_uuid.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ADType
&lt;img src=&quot;/assets/img/ble.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Nov 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/11/21/ble.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/11/21/ble.html</guid>
        
        <category>ble</category>
        
        
        <category>Android</category>
        
      </item>
    
  </channel>
</rss>
